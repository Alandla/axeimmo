import { NextRequest, NextResponse } from "next/server";
import type { AvatarStyle } from "@/src/types/avatar";
import type { VideoFormat } from "@/src/types/video";
import { waitUntil } from "@vercel/functions";
import { auth } from "@/src/lib/auth";
import { isUserInSpace } from "@/src/dao/userDao";
import { getSpaceById } from "@/src/dao/spaceDao";
import { ISpace } from "@/src/types/space";
import { nanoid } from "nanoid";
import { extractAvatarIdentityFromPrompt, improveAvatarPrompt } from "@/src/lib/workflowai";
import { generateAvatarImageComfySrpo, generateAvatarImageFluxSrpo } from "@/src/lib/fal";
import { generateSoulImageSimple } from "@/src/lib/higgsfield";
import { eventBus } from "@/src/lib/events";
import { uploadImageFromUrlToS3 } from "@/src/lib/r2";
import SpaceModel from "@/src/models/Space";
import { avatarsLimit as avatarsLimitConfig } from "@/src/config/plan.config";
import { PlanName } from "@/src/types/enums";
import { updateAvatarThumbnailAndFirstLook } from "@/src/dao/spaceDao";

// Common hint used to bias generations for podcast scenes
const PODCAST_HINT = " Podcast scene, cinematic lighting, subject in three-quarter view (3/4, slight angle), not looking at camera, speaking to someone off-camera. In front of the subject, include a realistic broadcast microphone that clearly resembles a Shure SM7B: large dynamic capsule, yoke mount on a boom arm, cylindrical body with foam windscreen. Frame so the microphone is visible and well-lit without blocking the face.";

export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const session = await auth();

  if (!session || !session.user || !session.user.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  console.log("GET /api/space/id/avatars by user: ", session.user.id);

  try {
    const userIsInSpace: boolean = await isUserInSpace(
      session.user.id,
      params.id
    );

    if (!userIsInSpace) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const space: ISpace = await getSpaceById(params.id);

    if (!space) {
      return NextResponse.json({ error: "Space not found" }, { status: 404 });
    }

    // Preserve custom avatar ids generated by nanoid without reformatting the rest
    const rawAvatars: any[] = (space as any).avatars || [];

    // Cleanup rule: drop looks in error older than 15 minutes and not ready
    const cutoff = Date.now() - 15 * 60 * 1000;
    let mutated = false;
    for (const avatar of rawAvatars) {
      if (Array.isArray(avatar.looks)) {
        const before = avatar.looks.length;
        avatar.looks = avatar.looks.filter((l: any) => {
          const isError = l?.status === 'error';
          const createdAt = l?.createdAt ? new Date(l.createdAt).getTime() : undefined;
          if (isError && createdAt && createdAt < cutoff) {
            return false; // remove silently
          }
          return true;
        });
        if (avatar.looks.length !== before) mutated = true;
      }
    }
    if (mutated) {
      try { await (space as any).save(); } catch {}
    }

    const avatarsWithFixedIds = rawAvatars.map((a: any) => {
      const base = typeof a.toObject === 'function' ? a.toObject() : a;
      return {
        ...base,
        id: a.id, // prÃ©server l'id custom d'avatar
      }
    });

    return NextResponse.json({ data: avatarsWithFixedIds });
  } catch (error) {
    console.error("Error getting space avatars:", error);
    return NextResponse.json(
      { error: "Error getting space avatars" },
      { status: 500 }
    );
  }
}

export async function POST(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const session = await auth();

  if (!session || !session.user || !session.user.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const userIsInSpace: boolean = await isUserInSpace(
      session.user.id,
      params.id
    );
    if (!userIsInSpace) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const space: ISpace = await getSpaceById(params.id);
    if (!space) {
      return NextResponse.json({ error: "Space not found" }, { status: 404 });
    }

    // Enforce avatar creation limit (space-level) except for Enterprise which is unlimited
    const existingAvatars = ((space as any).avatars as any[]) || [];
    const currentAvatarCount = existingAvatars.length;
    
    const planNameForSpace = space.plan?.name as PlanName | undefined;
    if (planNameForSpace !== PlanName.ENTREPRISE) {
      // Calculate limit based on plan if avatarsLimit is not set
      let limit = ((space as any).avatarsLimit as number);
      if (!limit || limit === 0) {
        const planKey = space.plan?.name as keyof typeof avatarsLimitConfig | undefined;
        limit = planKey ? avatarsLimitConfig[planKey] ?? 0 : 0;
      }
      if (currentAvatarCount >= limit) {
        return NextResponse.json({ error: "Avatar limit reached" }, { status: 403 });
      }
    }

    const body = await req.json().catch(() => ({}));
    const basePrompt: string | undefined = body?.prompt;
    const style: AvatarStyle | undefined = body?.style;
    const format: VideoFormat | undefined = body?.format;
    const imageUrl: string | undefined = body?.imageUrl;
    const upscale: boolean = body?.upscale ?? false;
    const imageUrls: string[] = Array.isArray(body?.imageUrls)
      ? (body.imageUrls as string[]).filter((u) => typeof u === "string" && u.length > 0)
      : [];
    // Backward compatibility: allow single imageUrl or array imageUrls
    const providedImageUrls: string[] = [
      ...imageUrls,
      ...(typeof imageUrl === "string" && imageUrl.length > 0 ? [imageUrl] : []),
    ];
    if (!basePrompt && providedImageUrls.length === 0) {
      return NextResponse.json(
        { error: "prompt or imageUrl(s) is required" },
        { status: 400 }
      );
    }

    // 1) Extract identity from prompt when provided
    let inferredName: string | undefined;
    let inferredGender: "male" | "female" | undefined;
    let inferredAge: string | undefined;
    let inferredTags: string[] | undefined;
    let inferredPlace: string | undefined;
    if (basePrompt) {
      const extracted = await extractAvatarIdentityFromPrompt(basePrompt);
      inferredName = extracted.name;
      inferredGender = extracted.gender;
      inferredAge = extracted.age;
      inferredTags = extracted.tags;
      inferredPlace = extracted.place;
    }

    const name: string = inferredName || "Custom Avatar";
    const gender: "male" | "female" = (inferredGender || "male") as any;
    const age: string = inferredAge || "undefined";
    const tags: string[] = Array.isArray(inferredTags) ? inferredTags : [];
    const place: string = inferredPlace || "unspecified";

    const avatarId = nanoid();

    // 2) Auto-create looks
    // If images are provided: one look per image; else: create an empty look to be filled by background generation
    let finalPrompt: string | undefined = undefined;
    if (providedImageUrls.length === 0 && basePrompt) {
      // Inject podcast hint before enhancement to influence the improved prompt (allow hint-only if no basePrompt)
      const sourcePrompt = style === 'podcast' ? `${basePrompt || ''}${PODCAST_HINT}`.trim() : basePrompt;
      const improved = await improveAvatarPrompt(sourcePrompt).catch(() => ({ enhancedPrompt: sourcePrompt }));
      finalPrompt = improved.enhancedPrompt || sourcePrompt;
    }

    const creatorUserId = session.user!.id as string

    const looks = (providedImageUrls.length > 0)
      ? providedImageUrls.map((url: string, idx: number) => ({
          id: nanoid(),
          name: `Look ${idx + 1}`,
          place: place,
          tags: tags,
          thumbnail: url,
          previewUrl: "",
          videoUrl: "",
          createdBy: creatorUserId,
          format: "vertical",
          settings: {},
        }))
      : [{
          id: nanoid(),
          name: "First Look",
          place: place,
          tags: tags,
          thumbnail: "",
          previewUrl: "",
          videoUrl: "",
          createdBy: creatorUserId,
          format: "vertical",
          settings: {},
        }];

    const newAvatar: any = {
      id: avatarId,
      createdBy: creatorUserId,
      name,
      age,
      gender,
      tags,
      thumbnail: providedImageUrls[0] || "",
      looks: looks,
    };

    (space as any).avatars.push(newAvatar);
    await (space as any).save();

    // Background image generation only when no image was provided
    if (providedImageUrls.length === 0 && finalPrompt) {
      waitUntil((async () => {
        try {
          const imageSize = format === 'horizontal' ? 'landscape_16_9' : (format === 'vertical' ? 'portrait_16_9' : undefined);
          let img: any;
          
          if (style === 'ugc-realist') {
            const soulResult = await generateAvatarImageComfySrpo({ prompt: finalPrompt as string });
            img = { url: soulResult.url };
          } else {
            img = await generateAvatarImageFluxSrpo({ prompt: finalPrompt as string, image_size: imageSize });
          }

          let finalImageUrl = img.url;

          // Upscale if requested
          if (upscale) {
            try {
              const { upscaleImageFromUrl } = await import('@/src/lib/freepik');
              const baseUrl = process.env.VERCEL_URL || "app.hoox.video";
              const webhookUrl = `https://${baseUrl}/api/webhook/freepik?spaceId=${params.id}&avatarId=${avatarId}&lookId=${looks[0].id}`;
              
              await upscaleImageFromUrl({
                image_url: img.url,
                webhook_url: webhookUrl
              });
              
              // Freepik always uses webhook, no immediate result
            } catch (upscaleError) {
              console.error('Error upscaling image, using original:', upscaleError);
            }
          }

          // Save generated image to our storage (R2) and use internal URL
          const fileName = `avatar-${avatarId}-${Date.now()}`;
          const savedUrl = await uploadImageFromUrlToS3(finalImageUrl, "medias-users", fileName);
          await updateAvatarThumbnailAndFirstLook(params.id, avatarId, savedUrl)
          try {
            eventBus.emit('avatar.updated', { spaceId: params.id, avatarId, status: 'ready' })
          } catch {}
        } catch (e) {
          console.error('Error generating first avatar look image (background)', e);
          try {
            eventBus.emit('avatar.updated', { spaceId: params.id, avatarId, status: 'error' })
          } catch {}
        }
      })());
    }

    return NextResponse.json({ data: newAvatar }, { status: 201 });
  } catch (error) {
    console.error("Error creating space avatar:", error);
    return NextResponse.json(
      { error: "Error creating space avatar" },
      { status: 500 }
    );
  }
}
